<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/c"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	   default-lazy-init="true">

	<description>Spring公共配置 </description>
	
	<context:annotation-config/>
	<context:component-scan base-package="com.snaker.system" />
	<!-- 定义受环境影响易变的变量 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${spring.datasource.driverClassName}" />
        <property name="url" value="${spring.datasource.url}" />
        <property name="username" value="${spring.datasource.username}" />
        <property name="password" value="${spring.datasource.password}" />

        <property name="maxIdle" value="${spring.datasource.max-idle}" />
        <property name="maxActive" value="${spring.datasource.max-active}" />
        <property name="defaultAutoCommit" value="false" />
        <property name="timeBetweenEvictionRunsMillis" value="3600000" />
        <property name="minEvictableIdleTimeMillis" value="3600000" />
    </bean>

    <!-- mybatis access -->
	<bean id="dbAccess" class="org.snaker.engine.access.mybatis.MybatisAccess">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis.cfg.xml"></property>
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="org.snaker.engine.entity" />
	</bean>

    <!--SnakerEngine配置-->
    <context:component-scan  base-package="org.snaker.engine"/>
    <bean id="engine" class="org.snaker.engine.spring.SpringSnakerEngine">
        <property name="processService" ref="processService"/>
        <property name="orderService" ref="orderService"/>
        <property name="taskService" ref="taskService"/>
        <property name="queryService" ref="queryService"/>
        <property name="managerService" ref="managerService"/>
    </bean>
    <bean id="processService" class="org.snaker.engine.core.ProcessService">
        <property name="access" ref="dbAccess"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>
    <bean id="orderService" class="org.snaker.engine.core.OrderService">
        <property name="access" ref="dbAccess"/>
    </bean>
    <bean id="taskService" class="org.snaker.engine.core.TaskService">
        <property name="access" ref="dbAccess"/>
    </bean>
    <bean id="managerService" class="org.snaker.engine.core.ManagerService">
        <property name="access" ref="dbAccess"/>
    </bean>
    <bean id="queryService" class="org.snaker.engine.core.QueryService">
        <property name="access" ref="dbAccess"/>
    </bean>
    <bean id="cacheManager" class="org.snaker.engine.cache.memory.MemoryCacheManager"/>
    <bean class="org.snaker.engine.impl.LogInterceptor"/>
    <bean class="org.snaker.engine.spring.SpelExpression"/>

	<!-- 事务管理器配置,单数据源事务 -->
	<!--<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--过滤掉swagger的相关访问配置-->
	<mvc:exclude-mapping path="/swagger*/**"/>
	<mvc:exclude-mapping path="/v2/**"/>
	<mvc:exclude-mapping path="/webjars/**"/>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="start*" propagation="REQUIRED"/>
			<tx:method name="execute*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="assign*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="complete*" propagation="REQUIRED" />
			<tx:method name="finish*" propagation="REQUIRED" />
			<tx:method name="terminate*" propagation="REQUIRED" />
			<tx:method name="take*" propagation="REQUIRED" />
			<tx:method name="deploy*" propagation="REQUIRED" />
			<tx:method name="undeploy*" propagation="REQUIRED" />
			<tx:method name="redeploy*" propagation="REQUIRED" />

			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="is*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- or execution(* org.snaker.framework.flow.service..*.*(..))
	 -->
	<aop:config>
		<!--or execution(* com.snaker.app.modules.service..*.*(..))
		or execution(* com.snaker.framework.*.service..*.*(..))-->
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* org.snaker.engine.core..*.*(..))
    or execution(* com.snaker.system.*.service..*.*(..))"/>
	</aop:config>
	<aop:aspectj-autoproxy proxy-target-class="true" />
</beans>